To-do:
Done - HeaderRevised: remove the styled-components and style.module.css to component folder
Done - EmbeddedVariable: change businessUnion to businessUnit, change props down order
Done - MultipleSelected: delete the ::after 
Done - SingleSelected: need props.style? change props order to "label, name, className, data, category, handleBusinessUnion, style"
OK - Number: two way binding, clear the input value after the number validation failed. maybe an useEffect?

Done - Editor: pass props down


Try:
Have the Rectangle that is currently in the EmbeddedVariables.js file, to try to pass down to its child ore parent for styling purpose


SurveyEditor.js - import { Survey, SurveyLOB } from './SurveyEditor/constant';
	|  const [surveyJSON, setSurveyJSON] = useState(Survey);
 const handleSurveyJSON = item => {
    const temp = surveyJSON;
    if (item.category) {
      temp.survey[item.category][item.title] = item.value;
    } else {
      console.log('Wrong Inputs!');
    }
    setSurveyJSON(temp);
    console.log(item);
  };
	| (Survey, SurveyLOB, handleSurveyJSON)
Editor.js 
	- pass every props (Survey, SurveyLOB, handleSurveyJSON) down to the individual components 
	- give an category name to each component, such as category={'embedded'}





EmbeddedVariable.js - const { survey, surveyLOB, handleSurveyJSON, category } = props

  const [surveyData, setSurveyData] = useState([]);
  const [businessUnion, setBusinessUnion] = useState('');
  const [embeddedData, setEmbeddedData] = useState([]);

  const handleBusinessUnion = value => {
    setBusinessUnion(value);

    handleSurveyJSON(value);

    //need to search surveyLOB by business unit to get embeddedData which will be array
	//the attribute under each category??
  };

  useEffect(() => {
    console.log(surveyLOB);
    let tempData = [];

    surveyLOB.LOB.map(data => {
      tempData.push({ title: data.title });
    });

    console.log(tempData);

    setSurveyData(tempData);
  }, []);


//example
      <SingleSelected
        label="Line of Business"
        name="lineOfBusiness"
        data={surveyData}
        className="required"
        category={category}
        handleBusinessUnion={handleBusinessUnion}
      />


//still need to work on the mapping to show the data
        {embeddedData.map(data => {
          return (
            //make your own embeddedData so you can see
            <MultipleSelected
              label={data['attribute_name']}
              name={data['attribute_name']}
              data={data.values}
            />
          );
        })}


SingleSelected.js -   const { label, name, data, className, category, handleBusinessUnion, style } = props;

  const handleChange = (event, value) => {
    const tempData = {
      category: category ? category : '',
      key: name,
      value: value.title
    };
    handleBusinessUnion(tempData);
    console.log(tempData);
  };


stores/survey.js - where we set up the initial state, store - getSurvey() & saveSurvey()
HeaderRevised.js - where we use the initial state and functions - getSurvey() & saveSurvey()
		- the save and create new button
